{"version":3,"sources":["cryptomonedas.png","components/Criptomoneda.js","components/Error.js","components/Formulario.js","components/Spinner.js","components/Cotizacion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","criptomoneda","CoinInfo","FullName","Name","value","Error","mensaje","className","Formulario","setMoneda","setCriptomoneda","useState","criptomonedas","setCriptomonedas","monedaCotizar","setMonedaCotizar","criptoCotizar","setCriptoCotizar","error","setError","useEffect","a","async","axios","get","resultado","data","Data","consultarAPI","componente","onSubmit","e","preventDefault","onChange","target","map","Criptomoneda","key","Id","type","Spinner","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","App","moneda","cargando","setCargando","setResultado","url","console","log","DISPLAY","setTimeout","cotizarCriptomoneda","componente2","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85331ca1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\r\n\r\nconst criptomoneda = ({criptomoneda}) => \r\n{\r\n    const { FullName, Name } = criptomoneda.CoinInfo;\r\n\r\n    return (\r\n\r\n        <option value={Name}> {FullName} </option>\r\n    )\r\n}\r\nexport default criptomoneda;\r\n\r\n","import React from 'react';\r\n\r\nconst Error = ({mensaje}) => (\r\n\r\n    <p className=\"error\"> {mensaje} </p>\r\n\r\n);\r\n\r\nexport default Error;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Criptomoneda from './Criptomoneda';\r\nimport Error from './Error';\r\n\r\n\r\nfunction Formulario({setMoneda, setCriptomoneda})\r\n{\r\n        const [ criptomonedas, setCriptomonedas] = useState([]);\r\n        const [ monedaCotizar, setMonedaCotizar] = useState('');\r\n        const [ criptoCotizar, setCriptoCotizar] = useState('');\r\n        const [ error, setError ] = useState(false);\r\n\r\n\r\n        useEffect(() => \r\n        {\r\n            const consultarAPI = async () => \r\n            {\r\n                const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?imit=10&tsym=USD';\r\n\r\n                const resultado = await axios.get(url);\r\n               setCriptomonedas(resultado.data.Data);\r\n            }\r\n\r\n            consultarAPI();\r\n        }, []);\r\n\r\n        //VALIDAR Q LOS DOS CAMPOS ESTEN SELECCIONADOS\r\n        const cotizarMoneda = e =>\r\n        {\r\n            e.preventDefault();\r\n            //Validacion:\r\n            if(monedaCotizar === '' || criptoCotizar === '')\r\n            {\r\n                setError(true);\r\n                return;\r\n            }\r\n                setError(false);\r\n                setMoneda(monedaCotizar);\r\n                setCriptomoneda(criptoCotizar);\r\n        }\r\n\r\n        //Mostrar el error en caso de que exista\r\n\r\n        const componente = (error) ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null;\r\n\r\n        return (\r\n            <form\r\n                onSubmit={cotizarMoneda}\r\n            >\r\n                {componente}\r\n                <div className=\"row\">\r\n                    <label> Elige tu Moneda</label>\r\n                    <select \r\n                        className=\"u-full-width\"\r\n                        onChange={e => setMonedaCotizar(e.target.value)}\r\n                    >\r\n                        <option value=\"\">-Elige tu moneda</option>\r\n                        <option value=\"ARS\">-Pesos Argentinos</option>\r\n                        <option value=\"USD\">-Dólares</option>\r\n                        <option value=\"EUR\">-Euro</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <label>Elige tu Criptomoneda</label>\r\n                    <select \r\n                            className=\"u-full-width\"\r\n                            onChange={e => setCriptoCotizar(e.target.value)}\r\n                    >\r\n                            <option value=\"\">-Elige tu criptomoneda -></option>\r\n                            {criptomonedas.map(criptomoneda => (\r\n                                <Criptomoneda\r\n                                    key={criptomoneda.CoinInfo.Id}\r\n                                    criptomoneda={criptomoneda}\r\n                                />\r\n\r\n                            ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <input type=\"submit\" className=\"button-primary u-full-width\" value=\"Calcular\"></input>\r\n\r\n            </form>\r\n        )\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n\r\n<div className=\"sk-folding-cube\">\r\n  <div className=\"sk-cube1 sk-cube\"></div>\r\n  <div className=\"sk-cube2 sk-cube\"></div>\r\n  <div className=\"sk-cube4 sk-cube\"></div>\r\n  <div className=\"sk-cube3 sk-cube\"></div>\r\n</div>\r\n\r\n\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst Cotizacion = ({resultado}) =>\r\n{\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    return (\r\n        <div className=\"resultado\">\r\n            <h2>Resultado</h2>\r\n            <p className=\"precio\"> El precio es: <span> {resultado.PRICE} </span></p>\r\n            <p> El precio mas alto del dia: <span> {resultado.HIGHDAY} </span></p>\r\n            <p> El precio mas bajo del dia: <span> {resultado.LOWDAY} </span></p>\r\n            <p> Variación de las últimas 24 hrs: <span> {resultado.CHANGEPCT24HOUR}% </span></p>\r\n            <p> Última actualización <span> {resultado.LASTUPDATE} </span></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cotizacion;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport imagen from './cryptomonedas.png';\nimport Formulario from './components/Formulario';\nimport Spinner from './components/Spinner';\nimport Cotizacion from './components/Cotizacion';\n\n\nfunction App() {\n\n  const [ moneda, setMoneda ] = useState('');\n  const [ criptomoneda, setCriptomoneda ] = useState('');\n  const [ cargando, setCargando ] = useState(false);\n  const [ resultado, setResultado] = useState({});\n\n  useEffect( () => {\n    const cotizarCriptomoneda = async () => \n    {\n\n        if(moneda === '') return;\n\n        const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n        const resultado = await axios.get(url);\n        console.log(resultado.data.DISPLAY[criptomoneda][moneda]);\n\n        //Mostrar Spinner\n        setCargando(true);\n        \n        //Ocultar Spinner y mostrar resultado\n        setTimeout(() => \n        {\n          setCargando(false)\n          setResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n        },3000);\n    }\n\n    cotizarCriptomoneda();\n  }, [criptomoneda, moneda]);\n  \n  const componente2 = (cargando) ? <Spinner />: <Cotizacion resultado={resultado} />\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <img src={imagen} alt=\"imagen criptomonedas\" className=\"logotipo\" />\n          </div>\n          <div className=\"one-half column\">\n            <h1>Cotiza criptomonedas al instante</h1>\n            <Formulario \n                setMoneda={setMoneda}\n                setCriptomoneda={setCriptomoneda}\n            />\n            {componente2}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}